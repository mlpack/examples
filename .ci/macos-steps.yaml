steps:
# Check out repository.
- checkout: self
  clean: true
  fetchDepth: 1

# Set python version.
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.10'

# Install build dependencies.
- script: |
    set -e
    sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer
    unset BOOST_ROOT
    brew install libomp openblas boost cereal

    sudo python -m pip install --upgrade pip

    mkdir deps/
    cd deps/

    # Install Armadillo 9.800.1 (the oldest supported version).
    curl -O http://files.mlpack.org/armadillo-9.800.1.tar.gz
    tar xvzf armadillo-9.800.1.tar.gz
    cd armadillo-9.800.1
    cmake .
    make
    sudo make install
    cd ../
    rm -rf armadillo-9.800.1/

    # Build and install the latest version of ensmallen.
    curl -O https://www.ensmallen.org/files/ensmallen-latest.tar.gz
    tar xvzf ensmallen-latest.tar.gz
    cd ensmallen-*/
    mkdir build
    cd build
    cmake -DBUILD_TESTS=OFF ../
    make
    sudo make install
    cd ../
    rm -rf ensmallen-*/

    # Install cereal.
    wget https://github.com/USCiLab/cereal/archive/v1.3.0.tar.gz
    tar -xvzpf v1.3.0.tar.gz
    cd cereal-1.3.0
    sudo cp -r include/cereal /usr/local/include/
    cd ../
    rm -rf cereal-1.3.0

    # Build mlpack.
    git clone https://github.com/mlpack/mlpack.git --depth 1
    cd mlpack
    mkdir build
    cd build
    cmake -DUSE_OPENMP=ON -DBUILD_CLI_EXECUTABLES=ON -DBUILD_JULIA_BINDINGS=OFF -DBUILD_PYTHON_BINDINGS=OFF -DBUILD_MARKDOWN_BINDINGS=OFF -DBUILD_R_BINDINGS=OFF -DBUILD_TESTS=OFF ..
    make -j2
    sudo make install
    cd ../
    rm -rf mlpack/

    # Leave deps/.
    cd ../

  displayName: "Install build dependencies"

# Download datasets.
- script: |
    python -m pip install tqdm requests pandas
    cd scripts/
    ./download_data_set.py
    cd ../
    ls data/

  displayName: "Download datasets"

# Now build the examples, only c++.
- script: |
    for f in cpp/*/*/*; do
      dir=`dirname $f`;
      # Remove the -fopenmp flag from the Makefile.
      sed -i '' 's/ -fopenmp//' $f;

      # TODO: the dataset cannot be loaded.
      if [ "$dir" == "c++/neural_networks/mnist_vae_cnn" ];
      then
        continue;
      fi

      cd $dir;
      target_name=`grep 'TARGET := ' Makefile | awk -F ' := ' '{ print $2 }'`;
      echo "Make target $target_name in directory $dir.";
      make;
      # Filter out "epoch in progress" lines.
      ./$target_name | grep -v -- '\.] ';
      if [ "${PIPESTATUS[0]}" != "0" ]; then
        echo "Example failed: $dir"
        echo "Example failed: $dir" >> ../faillog;
      else
        echo "Example succeeded; ${PIPESTATUS[0]}, ${PIPESTATUS[1]}";
      fi
      cd ../../../;
    done

    # Print any failures.
    if [ -f faillog ]; then
      echo "Some examples failed!";
      echo "";
      cat faillog;
      exit 1;
    fi

  displayName: "Run examples"
